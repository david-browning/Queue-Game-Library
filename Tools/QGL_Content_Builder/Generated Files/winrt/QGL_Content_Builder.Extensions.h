// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/QGL_Projection.2.h"
#include "winrt/impl/Windows.Storage.2.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/QGL_Content_Builder.Extensions.2.h"
#include "winrt/QGL_Content_Builder.h"

namespace winrt::impl {

template <typename D> bool consume_QGL_Content_Builder_Extensions_IExtensionProvider<D>::CheckSupport(QGL_Projection::ContentInfo const& info) const
{
    bool result{};
    check_hresult(WINRT_SHIM(QGL_Content_Builder::Extensions::IExtensionProvider)->CheckSupport(get_abi(info), &result));
    return result;
}

template <typename D> hstring consume_QGL_Content_Builder_Extensions_IExtensionProvider<D>::GetExtensionForLoader(QGL_Projection::ContentInfo const& info) const
{
    hstring result{};
    check_hresult(WINRT_SHIM(QGL_Content_Builder::Extensions::IExtensionProvider)->GetExtensionForLoader(get_abi(info), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_QGL_Content_Builder_Extensions_IExtensionProvider<D>::Extensions() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(QGL_Content_Builder::Extensions::IExtensionProvider)->get_Extensions(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_QGL_Content_Builder_Extensions_IExtensionProvider<D>::ObservableResourceTypes() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(QGL_Content_Builder::Extensions::IExtensionProvider)->get_ObservableResourceTypes(put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, QGL_Content_Builder::Extensions::IExtensionProvider> : produce_base<D, QGL_Content_Builder::Extensions::IExtensionProvider>
{
    int32_t WINRT_CALL CheckSupport(void* info, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CheckSupport, WINRT_WRAP(bool), QGL_Projection::ContentInfo const&);
            *result = detach_from<bool>(this->shim().CheckSupport(*reinterpret_cast<QGL_Projection::ContentInfo const*>(&info)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetExtensionForLoader(void* info, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetExtensionForLoader, WINRT_WRAP(hstring), QGL_Projection::ContentInfo const&);
            *result = detach_from<hstring>(this->shim().GetExtensionForLoader(*reinterpret_cast<QGL_Projection::ContentInfo const*>(&info)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Extensions(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Extensions, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().Extensions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ObservableResourceTypes(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ObservableResourceTypes, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().ObservableResourceTypes());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, QGL_Content_Builder::Extensions::IUnknownContentExtension> : produce_base<D, QGL_Content_Builder::Extensions::IUnknownContentExtension>
{};

}

WINRT_EXPORT namespace winrt::QGL_Content_Builder::Extensions {

inline ExtensionProvider::ExtensionProvider() :
    ExtensionProvider(impl::call_factory<ExtensionProvider>([](auto&& f) { return f.template ActivateInstance<ExtensionProvider>(); }))
{}

inline UnknownContentExtension::UnknownContentExtension() :
    UnknownContentExtension(impl::call_factory<UnknownContentExtension>([](auto&& f) { return f.template ActivateInstance<UnknownContentExtension>(); }))
{}

}

namespace winrt::impl {

struct property_QGL_Content_Builder_Extensions_IExtensionProvider
{ struct named {
    struct Extensions
    {
        struct name { static constexpr std::wstring_view value{ L"Extensions"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::QGL_Content_Builder::Extensions::IExtensionProvider;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Extensions();
            }
        };
    };
    struct ObservableResourceTypes
    {
        struct name { static constexpr std::wstring_view value{ L"ObservableResourceTypes"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::QGL_Content_Builder::Extensions::IExtensionProvider;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ObservableResourceTypes();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Extensions, named::ObservableResourceTypes>; };
};

struct property_QGL_Content_Builder_Extensions_ExtensionProvider
{ struct named {
    struct Extensions
    {
        struct name { static constexpr std::wstring_view value{ L"Extensions"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::QGL_Content_Builder::Extensions::ExtensionProvider;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Extensions();
            }
        };
    };
    struct ObservableResourceTypes
    {
        struct name { static constexpr std::wstring_view value{ L"ObservableResourceTypes"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::QGL_Content_Builder::Extensions::ExtensionProvider;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ObservableResourceTypes();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Extensions, named::ObservableResourceTypes>; };
};

struct property_QGL_Content_Builder_Extensions_UnknownContentExtension
{ struct named {
    struct ContentExtension
    {
        struct name { static constexpr std::wstring_view value{ L"ContentExtension"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::QGL_Content_Builder::Extensions::UnknownContentExtension;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ContentExtension();
            }
        };
    };
    struct ContentLoaderID
    {
        struct name { static constexpr std::wstring_view value{ L"ContentLoaderID"sv }; };
        using property_type = uint16_t;
        using target_type = winrt::QGL_Content_Builder::Extensions::UnknownContentExtension;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ContentLoaderID();
            }
        };
    };
    struct ContentLoaderName
    {
        struct name { static constexpr std::wstring_view value{ L"ContentLoaderName"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::QGL_Content_Builder::Extensions::UnknownContentExtension;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ContentLoaderName();
            }
        };
    };
    struct ResourceType
    {
        struct name { static constexpr std::wstring_view value{ L"ResourceType"sv }; };
        using property_type = uint16_t;
        using target_type = winrt::QGL_Content_Builder::Extensions::UnknownContentExtension;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ResourceType();
            }
        };
    };
    struct ResourceTypeName
    {
        struct name { static constexpr std::wstring_view value{ L"ResourceTypeName"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::QGL_Content_Builder::Extensions::UnknownContentExtension;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ResourceTypeName();
            }
        };
    };};
    struct list { using type = impl::typelist<named::ContentExtension, named::ContentLoaderID, named::ContentLoaderName, named::ResourceType, named::ResourceTypeName>; };
};

}

WINRT_EXPORT namespace winrt::experimental::reflect {
template <> struct named_property<QGL_Content_Builder::Extensions::IExtensionProvider> : impl::property_QGL_Content_Builder_Extensions_IExtensionProvider::named {};
template <> struct properties<QGL_Content_Builder::Extensions::IExtensionProvider> : impl::property_QGL_Content_Builder_Extensions_IExtensionProvider::list {};
template <> struct named_property<QGL_Content_Builder::Extensions::ExtensionProvider> : impl::property_QGL_Content_Builder_Extensions_ExtensionProvider::named {};
template <> struct properties<QGL_Content_Builder::Extensions::ExtensionProvider> : impl::property_QGL_Content_Builder_Extensions_ExtensionProvider::list {};
template <> struct named_property<QGL_Content_Builder::Extensions::UnknownContentExtension> : impl::property_QGL_Content_Builder_Extensions_UnknownContentExtension::named {};
template <> struct properties<QGL_Content_Builder::Extensions::UnknownContentExtension> : impl::property_QGL_Content_Builder_Extensions_UnknownContentExtension::list {};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::QGL_Content_Builder::Extensions::IExtensionProvider> : winrt::impl::hash_base<winrt::QGL_Content_Builder::Extensions::IExtensionProvider> {};
template<> struct hash<winrt::QGL_Content_Builder::Extensions::IUnknownContentExtension> : winrt::impl::hash_base<winrt::QGL_Content_Builder::Extensions::IUnknownContentExtension> {};
template<> struct hash<winrt::QGL_Content_Builder::Extensions::ExtensionProvider> : winrt::impl::hash_base<winrt::QGL_Content_Builder::Extensions::ExtensionProvider> {};
template<> struct hash<winrt::QGL_Content_Builder::Extensions::UnknownContentExtension> : winrt::impl::hash_base<winrt::QGL_Content_Builder::Extensions::UnknownContentExtension> {};

}
