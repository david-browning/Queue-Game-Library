// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/QGL_Content_Builder.Extensions.2.h"
#include "winrt/impl/QGL_Projection.2.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/QGL_Content_Builder.PageModels.2.h"
#include "winrt/QGL_Content_Builder.h"

namespace winrt::impl {

template <typename D> bool consume_QGL_Content_Builder_PageModels_IHomePageVM<D>::IsProjectLoading() const
{
    bool value{};
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IHomePageVM)->get_IsProjectLoading(&value));
    return value;
}

template <typename D> bool consume_QGL_Content_Builder_PageModels_IHomePageVM<D>::IsProjectSaving() const
{
    bool value{};
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IHomePageVM)->get_IsProjectSaving(&value));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_QGL_Content_Builder_PageModels_IHomePageVM<D>::RecentFiles() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IHomePageVM)->get_RecentFiles(put_abi(value)));
    return value;
}

template <typename D> void consume_QGL_Content_Builder_PageModels_IHomePageVM<D>::ClearRecentFiles() const
{
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IHomePageVM)->ClearRecentFiles());
}

template <typename D> Windows::Foundation::IAsyncAction consume_QGL_Content_Builder_PageModels_IHomePageVM<D>::PopulateRecentFiles() const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IHomePageVM)->PopulateRecentFiles(put_abi(operation)));
    return operation;
}

template <typename D> QGL_Content_Builder::PageModels::HomePageVM consume_QGL_Content_Builder_PageModels_IHomePageVMFactory<D>::CreateInstance(QGL_Content_Builder::Extensions::ExtensionProvider const& extensionProvider) const
{
    QGL_Content_Builder::PageModels::HomePageVM value{ nullptr };
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IHomePageVMFactory)->CreateInstance(get_abi(extensionProvider), put_abi(value)));
    return value;
}

template <typename D> hstring consume_QGL_Content_Builder_PageModels_IRecentProjectVM<D>::ContentName() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IRecentProjectVM)->get_ContentName(put_abi(value)));
    return value;
}

template <typename D> hstring consume_QGL_Content_Builder_PageModels_IRecentProjectVM<D>::Path() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IRecentProjectVM)->get_Path(put_abi(value)));
    return value;
}

template <typename D> QGL_Content_Builder::PageModels::RecentProjectVM consume_QGL_Content_Builder_PageModels_IRecentProjectVMFactory<D>::CreateInstance(param::hstring const& filePath, QGL_Projection::ContentInfo const& info) const
{
    QGL_Content_Builder::PageModels::RecentProjectVM value{ nullptr };
    check_hresult(WINRT_SHIM(QGL_Content_Builder::PageModels::IRecentProjectVMFactory)->CreateInstance(get_abi(filePath), get_abi(info), put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, QGL_Content_Builder::PageModels::IHomePageVM> : produce_base<D, QGL_Content_Builder::PageModels::IHomePageVM>
{
    int32_t WINRT_CALL get_IsProjectLoading(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsProjectLoading, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsProjectLoading());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsProjectSaving(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsProjectSaving, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsProjectSaving());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RecentFiles(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecentFiles, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().RecentFiles());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ClearRecentFiles() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClearRecentFiles, WINRT_WRAP(void));
            this->shim().ClearRecentFiles();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL PopulateRecentFiles(void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PopulateRecentFiles, WINRT_WRAP(Windows::Foundation::IAsyncAction));
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().PopulateRecentFiles());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, QGL_Content_Builder::PageModels::IHomePageVMFactory> : produce_base<D, QGL_Content_Builder::PageModels::IHomePageVMFactory>
{
    int32_t WINRT_CALL CreateInstance(void* extensionProvider, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(QGL_Content_Builder::PageModels::HomePageVM), QGL_Content_Builder::Extensions::ExtensionProvider const&);
            *value = detach_from<QGL_Content_Builder::PageModels::HomePageVM>(this->shim().CreateInstance(*reinterpret_cast<QGL_Content_Builder::Extensions::ExtensionProvider const*>(&extensionProvider)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, QGL_Content_Builder::PageModels::IRecentProjectVM> : produce_base<D, QGL_Content_Builder::PageModels::IRecentProjectVM>
{
    int32_t WINRT_CALL get_ContentName(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentName, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().ContentName());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Path(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Path, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Path());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, QGL_Content_Builder::PageModels::IRecentProjectVMFactory> : produce_base<D, QGL_Content_Builder::PageModels::IRecentProjectVMFactory>
{
    int32_t WINRT_CALL CreateInstance(void* filePath, void* info, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(QGL_Content_Builder::PageModels::RecentProjectVM), hstring const&, QGL_Projection::ContentInfo const&);
            *value = detach_from<QGL_Content_Builder::PageModels::RecentProjectVM>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&filePath), *reinterpret_cast<QGL_Projection::ContentInfo const*>(&info)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::QGL_Content_Builder::PageModels {

inline HomePageVM::HomePageVM(QGL_Content_Builder::Extensions::ExtensionProvider const& extensionProvider) :
    HomePageVM(impl::call_factory<HomePageVM, QGL_Content_Builder::PageModels::IHomePageVMFactory>([&](auto&& f) { return f.CreateInstance(extensionProvider); }))
{}

inline RecentProjectVM::RecentProjectVM(param::hstring const& filePath, QGL_Projection::ContentInfo const& info) :
    RecentProjectVM(impl::call_factory<RecentProjectVM, QGL_Content_Builder::PageModels::IRecentProjectVMFactory>([&](auto&& f) { return f.CreateInstance(filePath, info); }))
{}

}

namespace winrt::impl {

struct property_QGL_Content_Builder_PageModels_IHomePageVM
{ struct named {
    struct IsProjectLoading
    {
        struct name { static constexpr std::wstring_view value{ L"IsProjectLoading"sv }; };
        using property_type = bool;
        using target_type = winrt::QGL_Content_Builder::PageModels::IHomePageVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsProjectLoading();
            }
        };
    };
    struct IsProjectSaving
    {
        struct name { static constexpr std::wstring_view value{ L"IsProjectSaving"sv }; };
        using property_type = bool;
        using target_type = winrt::QGL_Content_Builder::PageModels::IHomePageVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsProjectSaving();
            }
        };
    };
    struct RecentFiles
    {
        struct name { static constexpr std::wstring_view value{ L"RecentFiles"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::QGL_Content_Builder::PageModels::IHomePageVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.RecentFiles();
            }
        };
    };};
    struct list { using type = impl::typelist<named::IsProjectLoading, named::IsProjectSaving, named::RecentFiles>; };
};

struct property_QGL_Content_Builder_PageModels_IRecentProjectVM
{ struct named {
    struct ContentName
    {
        struct name { static constexpr std::wstring_view value{ L"ContentName"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::QGL_Content_Builder::PageModels::IRecentProjectVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ContentName();
            }
        };
    };
    struct Path
    {
        struct name { static constexpr std::wstring_view value{ L"Path"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::QGL_Content_Builder::PageModels::IRecentProjectVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Path();
            }
        };
    };};
    struct list { using type = impl::typelist<named::ContentName, named::Path>; };
};

struct property_QGL_Content_Builder_PageModels_HomePageVM
{ struct named {
    struct IsProjectLoading
    {
        struct name { static constexpr std::wstring_view value{ L"IsProjectLoading"sv }; };
        using property_type = bool;
        using target_type = winrt::QGL_Content_Builder::PageModels::HomePageVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsProjectLoading();
            }
        };
    };
    struct IsProjectSaving
    {
        struct name { static constexpr std::wstring_view value{ L"IsProjectSaving"sv }; };
        using property_type = bool;
        using target_type = winrt::QGL_Content_Builder::PageModels::HomePageVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsProjectSaving();
            }
        };
    };
    struct RecentFiles
    {
        struct name { static constexpr std::wstring_view value{ L"RecentFiles"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::QGL_Content_Builder::PageModels::HomePageVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.RecentFiles();
            }
        };
    };};
    struct list { using type = impl::typelist<named::IsProjectLoading, named::IsProjectSaving, named::RecentFiles>; };
};

struct property_QGL_Content_Builder_PageModels_RecentProjectVM
{ struct named {
    struct ContentName
    {
        struct name { static constexpr std::wstring_view value{ L"ContentName"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::QGL_Content_Builder::PageModels::RecentProjectVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ContentName();
            }
        };
    };
    struct Path
    {
        struct name { static constexpr std::wstring_view value{ L"Path"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::QGL_Content_Builder::PageModels::RecentProjectVM;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Path();
            }
        };
    };};
    struct list { using type = impl::typelist<named::ContentName, named::Path>; };
};

}

WINRT_EXPORT namespace winrt::experimental::reflect {
template <> struct named_property<QGL_Content_Builder::PageModels::IHomePageVM> : impl::property_QGL_Content_Builder_PageModels_IHomePageVM::named {};
template <> struct properties<QGL_Content_Builder::PageModels::IHomePageVM> : impl::property_QGL_Content_Builder_PageModels_IHomePageVM::list {};
template <> struct named_property<QGL_Content_Builder::PageModels::IRecentProjectVM> : impl::property_QGL_Content_Builder_PageModels_IRecentProjectVM::named {};
template <> struct properties<QGL_Content_Builder::PageModels::IRecentProjectVM> : impl::property_QGL_Content_Builder_PageModels_IRecentProjectVM::list {};
template <> struct named_property<QGL_Content_Builder::PageModels::HomePageVM> : impl::property_QGL_Content_Builder_PageModels_HomePageVM::named {};
template <> struct properties<QGL_Content_Builder::PageModels::HomePageVM> : impl::property_QGL_Content_Builder_PageModels_HomePageVM::list {};
template <> struct named_property<QGL_Content_Builder::PageModels::RecentProjectVM> : impl::property_QGL_Content_Builder_PageModels_RecentProjectVM::named {};
template <> struct properties<QGL_Content_Builder::PageModels::RecentProjectVM> : impl::property_QGL_Content_Builder_PageModels_RecentProjectVM::list {};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::QGL_Content_Builder::PageModels::IHomePageVM> : winrt::impl::hash_base<winrt::QGL_Content_Builder::PageModels::IHomePageVM> {};
template<> struct hash<winrt::QGL_Content_Builder::PageModels::IHomePageVMFactory> : winrt::impl::hash_base<winrt::QGL_Content_Builder::PageModels::IHomePageVMFactory> {};
template<> struct hash<winrt::QGL_Content_Builder::PageModels::IRecentProjectVM> : winrt::impl::hash_base<winrt::QGL_Content_Builder::PageModels::IRecentProjectVM> {};
template<> struct hash<winrt::QGL_Content_Builder::PageModels::IRecentProjectVMFactory> : winrt::impl::hash_base<winrt::QGL_Content_Builder::PageModels::IRecentProjectVMFactory> {};
template<> struct hash<winrt::QGL_Content_Builder::PageModels::HomePageVM> : winrt::impl::hash_base<winrt::QGL_Content_Builder::PageModels::HomePageVM> {};
template<> struct hash<winrt::QGL_Content_Builder::PageModels::RecentProjectVM> : winrt::impl::hash_base<winrt::QGL_Content_Builder::PageModels::RecentProjectVM> {};

}
