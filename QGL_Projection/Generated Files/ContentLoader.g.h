// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/Windows.Storage.h"
#include "winrt/Windows.Storage.Streams.h"
#include "winrt/Windows.UI.Xaml.Data.h"
#include "winrt/Windows.Foundation.h"
#include "winrt/QGL_Projection.h"

namespace winrt::QGL_Projection::implementation {

template <typename D, typename... I>
struct WINRT_EBO ContentLoader_base : implements<D, QGL_Projection::IContentLoader, Windows::Foundation::IStringable, I...>
{
    using base_type = ContentLoader_base;
    using class_type = QGL_Projection::ContentLoader;
    using implements_type = typename ContentLoader_base::implements_type;
    using implements_type::implements_type;
    
#if _MSC_VER < 1914
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename impl::implements_default_interface<D>::type, default_interface<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<default_interface<class_type>>(*this)));
        return result;
    }
#else
    operator impl::producer_ref<class_type> const() const noexcept
    {
        return { to_abi<default_interface<class_type>>(this) };
    }
#endif

    hstring GetRuntimeClassName() const
    {
        return L"QGL_Projection.ContentLoader";
    }
};

}

namespace winrt::QGL_Projection::factory_implementation {

template <typename D, typename T, typename... I>
struct WINRT_EBO ContentLoaderT : implements<D, Windows::Foundation::IActivationFactory, QGL_Projection::IContentLoaderFactory, I...>
{
    using instance_type = QGL_Projection::ContentLoader;

    hstring GetRuntimeClassName() const
    {
        return L"QGL_Projection.ContentLoader";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    QGL_Projection::ContentLoader CreateInstance(uint16_t val, hstring const& name)
    {
        return make<T>(val, name);
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_CONTENTLOADER_XAML_G_H) || __has_include("ContentLoader.xaml.g.h")

#include "ContentLoader.xaml.g.h"

#else

namespace winrt::QGL_Projection::implementation
{
    template <typename D, typename... I>
    using ContentLoaderT = ContentLoader_base<D, I...>;
}

#endif
