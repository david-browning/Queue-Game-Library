// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

WINRT_EXPORT namespace winrt::QGL_Projection {

struct ContentInfo;

}

WINRT_EXPORT namespace winrt::Windows::Storage {

struct StorageFile;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Data {

struct PropertyChangedEventHandler;

}

WINRT_EXPORT namespace winrt::QGL_Content_Builder::Extensions {

struct IExtensionProvider;
struct IUnknownContentExtension;
struct ExtensionProvider;
struct UnknownContentExtension;

}

namespace winrt::impl {

template <> struct category<QGL_Content_Builder::Extensions::IExtensionProvider>{ using type = interface_category; };
template <> struct category<QGL_Content_Builder::Extensions::IUnknownContentExtension>{ using type = interface_category; };
template <> struct category<QGL_Content_Builder::Extensions::ExtensionProvider>{ using type = class_category; };
template <> struct category<QGL_Content_Builder::Extensions::UnknownContentExtension>{ using type = class_category; };
template <> struct name<QGL_Content_Builder::Extensions::IExtensionProvider>{ static constexpr auto & value{ L"QGL_Content_Builder.Extensions.IExtensionProvider" }; };
template <> struct name<QGL_Content_Builder::Extensions::IUnknownContentExtension>{ static constexpr auto & value{ L"QGL_Content_Builder.Extensions.IUnknownContentExtension" }; };
template <> struct name<QGL_Content_Builder::Extensions::ExtensionProvider>{ static constexpr auto & value{ L"QGL_Content_Builder.Extensions.ExtensionProvider" }; };
template <> struct name<QGL_Content_Builder::Extensions::UnknownContentExtension>{ static constexpr auto & value{ L"QGL_Content_Builder.Extensions.UnknownContentExtension" }; };
template <> struct guid_storage<QGL_Content_Builder::Extensions::IExtensionProvider>{ static constexpr guid value{ 0x765C09A1,0x0F55,0x5BD6,{ 0xAE,0x2B,0x00,0xBD,0x3B,0x5E,0x8D,0xB1 } }; };
template <> struct guid_storage<QGL_Content_Builder::Extensions::IUnknownContentExtension>{ static constexpr guid value{ 0xBE458BFE,0x7C56,0x559C,{ 0x9A,0x2B,0xC3,0x53,0x8C,0x16,0xC2,0xA7 } }; };
template <> struct default_interface<QGL_Content_Builder::Extensions::ExtensionProvider>{ using type = QGL_Content_Builder::Extensions::IExtensionProvider; };
template <> struct default_interface<QGL_Content_Builder::Extensions::UnknownContentExtension>{ using type = QGL_Content_Builder::Extensions::IUnknownContentExtension; };

template <> struct abi<QGL_Content_Builder::Extensions::IExtensionProvider>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CheckSupport(void* info, bool* result) noexcept = 0;
    virtual int32_t WINRT_CALL GetExtensionForLoader(void* info, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL get_Extensions(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ObservableResourceTypes(void** value) noexcept = 0;
};};

template <> struct abi<QGL_Content_Builder::Extensions::IUnknownContentExtension>{ struct type : IInspectable
{
};};

template <typename D>
struct consume_QGL_Content_Builder_Extensions_IExtensionProvider
{
    bool CheckSupport(QGL_Projection::ContentInfo const& info) const;
    hstring GetExtensionForLoader(QGL_Projection::ContentInfo const& info) const;
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> Extensions() const;
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> ObservableResourceTypes() const;
};
template <> struct consume<QGL_Content_Builder::Extensions::IExtensionProvider> { template <typename D> using type = consume_QGL_Content_Builder_Extensions_IExtensionProvider<D>; };

template <typename D>
struct consume_QGL_Content_Builder_Extensions_IUnknownContentExtension
{
};
template <> struct consume<QGL_Content_Builder::Extensions::IUnknownContentExtension> { template <typename D> using type = consume_QGL_Content_Builder_Extensions_IUnknownContentExtension<D>; };

}
