// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/QGL_Projection.h"
#include "winrt/Windows.Storage.h"
#include "winrt/Windows.UI.Xaml.Data.h"
#include "winrt/QGL_Content_Builder.Extensions.h"

namespace winrt::QGL_Content_Builder::Extensions::implementation {

template <typename D, typename... I>
struct WINRT_EBO ExtensionProvider_base : implements<D, QGL_Content_Builder::Extensions::IExtensionProvider, Windows::UI::Xaml::Data::INotifyPropertyChanged, I...>
{
    using base_type = ExtensionProvider_base;
    using class_type = QGL_Content_Builder::Extensions::ExtensionProvider;
    using implements_type = typename ExtensionProvider_base::implements_type;
    using implements_type::implements_type;
    
#if _MSC_VER < 1914
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename impl::implements_default_interface<D>::type, default_interface<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<default_interface<class_type>>(*this)));
        return result;
    }
#else
    operator impl::producer_ref<class_type> const() const noexcept
    {
        return { to_abi<default_interface<class_type>>(this) };
    }
#endif

    hstring GetRuntimeClassName() const
    {
        return L"QGL_Content_Builder.Extensions.ExtensionProvider";
    }
};

}

namespace winrt::QGL_Content_Builder::Extensions::factory_implementation {

template <typename D, typename T, typename... I>
struct WINRT_EBO ExtensionProviderT : implements<D, Windows::Foundation::IActivationFactory, I...>
{
    using instance_type = QGL_Content_Builder::Extensions::ExtensionProvider;

    hstring GetRuntimeClassName() const
    {
        return L"QGL_Content_Builder.Extensions.ExtensionProvider";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        return make<T>();
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_EXTENSIONPROVIDER_XAML_G_H) || __has_include("Extensions.ExtensionProvider.xaml.g.h")

#include "Extensions.ExtensionProvider.xaml.g.h"

#else

namespace winrt::QGL_Content_Builder::Extensions::implementation
{
    template <typename D, typename... I>
    using ExtensionProviderT = ExtensionProvider_base<D, I...>;
}

#endif
